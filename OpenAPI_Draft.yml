openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about
    Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_
    
    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: user
    description: Operations about user
paths:
  /pet:
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      requestBody:
        description: Create a new pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          description: ID of pet to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
      security:
        - api_key: []
        - petstore_auth:
            - write:pets
            - read:pets
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: ''
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          description: ID of pet that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: name
          in: query
          description: Name of pet that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of pet that needs to be updated
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - write:pets
            - read:pets
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: delete a pet
      operationId: deletePet
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: petId
          in: path
          description: Pet id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /pet/{petId}/uploadImage:
    post:
      tags:
        - pet
      summary: uploads an image
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /event/{eventID}/getTracks:
    get:
      tags:
        - event
        - track
      summary: Returns all tracks corresponding to an event.
      description: For the supplied event id, if the corresponding event exists, then all track objects corresponding to that event are return.
      operationId: getTracksByEventID
      parameters:
        - name: eventID
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '400':
          description: Invalid event ID was provided.
        '404':
          description: No event with the provided ID exists.
  /event/{id}/getAllInvitations:
    get:
      tags:
        - event
        - attendee
      summary: Returns all invitations for the given event.
      description: For the supplied event id, if the corresponding event exists, then return all of the invite objects corresponding to the event.
      operationId: getInvitesByEventID
      parameters:
        - name: eventID
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendee'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendee'
        '400':
          description: Invalid event ID was provided.
        '404':
          description: No event with the provided ID exists.
  /event/{eventID}/attendees:
    post:
      tags:
        - event
        - attendee
      summary: Records a new attendee to the specified event.
      description: For the supplied event id, if the corresponding event exists, then the described attendee is registered under the specified event. This action is only performed when the attendee object supplied is valid.
      operationId: registerAttendeeByEventID
      parameters:
        - name: eventID
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64
      requestBody:
        description: the attendee object to be added.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
          application/xml:
            schema:
              $ref: '#/components/schemas/Attendee'

      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid event ID or attendee object were provided.
        '404':
          description: No event with the provided ID exists.
    put:
      tags:
        - event
        - attendee
      summary: Updates the status of an attendee to the specified event.
      description: For the supplied event id, if the corresponding event exists, then the attendee's attributes are updated according to the supplied object.
      operationId: updateAttendeeByEventID
      parameters:
        - name: eventID
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64
      requestBody:
        description: the attendee object to be added.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
          application/xml:
            schema:
              $ref: '#/components/schemas/Attendee'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendee'
            application/xml:
              schema:
                $ref: '#/components/schemas/Attendee'
        '400':
          description: Invalid event ID or attendee object were provided.
        '404':
          description: No event with the provided ID exists.
    delete:
      tags:
        - event
        - attendee
      summary: Deletes an attendee's participation in a particular event
      description: For the supplied event id, if the corresponding event exists, then the attendee object corresponding to the supplied userID and eventID is deleted.
      operationId: deleteAttendeeByEventID
      parameters:
        - name: eventID
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64
      requestBody:
        description: the soon-to-be-deleted attendee's userID.
        content:
          application/json:
            schema:
              type: integer
              format: int64
          application/xml:
            schema:
              type: integer
              format: int64

      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid event ID or userID were provided.
        '404':
          description: The user specified with the userID never attended the event specified by the eventID.
  /event/{eventID}/sendInvite:
    post:
      tags:
        - event
        - attendee
      summary: Send an attendance invitation for an event to a user.
      description: For the supplied event id and user id, if their corresponding objects exist, then an inivitation is sent to the user.
      operationId: sendInviteByEventID
      parameters:
        - name: eventID
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64
      requestBody:
        description: the attendee object to be added.
        content:
          application/json:
            schema:
              type: integer
              format: int64
          application/xml:
            schema:
              type: integer
              format: int64

      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid event ID or attendee object were provided.
        '404':
          description: No event with the provided ID exists.
  /user:
    post:
      tags:
        - user
      summary: Creates a new account
      description: This allows for new account creation.
      operationId: createAccount
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: Operation executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/{userID}:
    put:
      tags:
        - user
      summary: Update user account
      description: This allows to update the account information of a user.
      operationId: updateAccount
      parameters:
        - name: userID
          in: path
          description: userID that need to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent userAccount
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: User account successfully updated
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/delete/{userID}:
    delete:
      tags:
        - user
      summary: Deletes an account
      description: This allows for account deletion.
      operationId: deleteAccount
      parameters:
        - name: userID
          in: path
          description: The userID that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User successfully deleted
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found
  /user/{userID}/invitations:
    get:
      tags:
        - user
      summary: Shows user invitations
      description: This allows to show the current invitations for events of the user.
      operationId: getUserInvitations
      parameters:
        - name: userID
          in: path
          description: The userID of a user whose invitations we want to retrieve
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User invitations successfully shown
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: This allows a user to log into the system.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
        '400':
          description: Invalid username/password supplied
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        '200':
          description: Successful logout
  /user/{userID}/events:
    get:
      tags:
        - user
      summary: Get events a user is supposed to attend
      description: ''
      operationId: getUserEvents
      parameters:
        - name: userID
          in: path
          description: 'UserID of a user for whom we want to retrieve events they are supposed to attend'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found
  /user/{userID}/events/history:
    get:
      tags:
        - user
      summary: Get user's event history
      description: This allows to retrieve events user has attended in the past.
      operationId: getUserEventHistory
      parameters:
        - name: userID
          in: path
          description: UserID of a user for whom we want to retrieve event history
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: Marieke
        lastName:
          type: string
          example: Smith
        email:
          type: string
          example: pete@email.com
        password:
          type: string
          example: '12345'
        affiliation:
          type: string
          example: 'Fireman'
        personalWebsite:
          type: string
          example: "myPersonalWebsite.com"
        preferredCommunication:
          type: string
          example: "e-mail"
      xml:
        name: user
    Event:
      type: object
      properties:
        id:
          required: true
          type: integer
          format: int64
          example: 4321234
        startDate:
          type: date
          example: 2001-07-04 12:08
        endDate:
          type: date
          example: 2001-08-05 15:23
        isCanceled:
          type: boolean
        name:
          required: true
          type: string
          example: Open conference for paper review
        description:
          nullable: true
          type: string
          example: this is a conference that deals with submitting papers to review.
      xml:
        name: event

    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header