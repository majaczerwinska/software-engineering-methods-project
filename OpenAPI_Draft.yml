openapi: 3.0.3
info:
  title: User Microservice
  description: |-
    This is the User Microservice for the EasyConf scenario in CSE2115
  version: 0.0.0
tags:
  - name: user
    description: Operations about user
  - name: event
paths:
  /event/{eventID}/getTracks:
    get:
      tags:
        - event
        - track
      summary: Returns all tracks corresponding to an event.
      description: For the supplied event id, if the corresponding event exists, then all track objects corresponding to that event are return.
      operationId: getTracksByEventID
      parameters:
        - name: eventID
          required: true
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '400':
          description: Invalid event ID was provided.
        '401':
          description: UnauthorizedError
        '404':
          description: No event with the provided ID exists.
  /event/{eventID}/getAllInvitations:
    get:
      tags:
        - event
        - attendee
      summary: Returns all invitations for the given event.
      description: For the supplied event id, if the corresponding event exists, then return all of the invite objects corresponding to the event.
      operationId: getInvitesByEventID
      parameters:
        - name: eventID
          required: true
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendee'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendee'
        '400':
          description: Invalid event ID was provided.
        '404':
          description: No event with the provided ID exists.
  /event/{eventID}/attendees:
    post:
      tags:
        - event
        - attendee
      summary: Records a new attendee to the specified event.
      description: For the supplied event id, if the corresponding event exists, then the described attendee is registered under the specified event. This action is only performed when the attendee object supplied is valid.
      operationId: registerAttendeeByEventID
      parameters:
        - name: eventID
          required: true
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64
      requestBody:
        description: the attendee object to be added.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
          application/xml:
            schema:
              $ref: '#/components/schemas/Attendee'

      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid event ID or attendee object were provided.
        '404':
          description: No event with the provided ID exists.
    put:
      tags:
        - event
        - attendee
      summary: Updates the status of an attendee to the specified event.
      description: For the supplied event id, if the corresponding event exists, then the attendee's attributes are updated according to the supplied object.
      operationId: updateAttendeeByEventID
      parameters:
        - name: eventID
          required: true
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64
      requestBody:
        description: the attendee object to be added.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
          application/xml:
            schema:
              $ref: '#/components/schemas/Attendee'

      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendee'
            application/xml:
              schema:
                $ref: '#/components/schemas/Attendee'
        '400':
          description: Invalid event ID or attendee object were provided.
        '404':
          description: No event with the provided ID exists.
    delete:
      tags:
        - event
        - attendee
      summary: Deletes an attendee's participation in a particular event
      description: For the supplied event id, if the corresponding event exists, then the attendee object corresponding to the supplied userID and eventID is deleted.
      operationId: deleteAttendeeByEventID
      parameters:
        - name: eventID
          required: true
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64

      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid event ID or userID were provided.
        '404':
          description: The user specified with the userID never attended the event specified by the eventID.
  /event/{eventID}/sendInvite:
    post:
      tags:
        - event
        - attendee
      summary: Send an attendance invitation for an event to a user.
      description: For the supplied event id and user id, if their corresponding objects exist, then an inivitation is sent to the user.
      operationId: sendInviteByEventID
      parameters:
        - name: eventID
          required: true
          in: path
          description: the ID of the event under inquiry.
          schema:
            type: integer
            format: int64
      requestBody:
        description: the attendee object to be added.
        content:
          application/json:
            schema:
              type: integer
              format: int64
          application/xml:
            schema:
              type: integer
              format: int64

      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid event ID or attendee object were provided.
        '404':
          description: No event with the provided ID exists.

  /user:
    post:
      tags:
        - user
      summary: Creates a new account
      description: This allows for new account creation.
      operationId: createAccount
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: Operation executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/{userID}:
    put:
      tags:
        - user
      summary: Update user account
      description: This allows to update the account information of a user.
      operationId: updateAccount
      parameters:
        - name: userID
          in: path
          description: userID that need to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent userAccount
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: User account successfully updated
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/delete/{userID}:
    delete:
      tags:
        - user
      summary: Deletes an account
      description: This allows for account deletion.
      operationId: deleteAccount
      parameters:
        - name: userID
          in: path
          description: The userID that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User successfully deleted
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found
  /user/{userID}/invitations:
    get:
      tags:
        - user
      summary: Shows user invitations
      description: This allows to show the current invitations for events of the user.
      operationId: getUserInvitations
      parameters:
        - name: userID
          in: path
          description: The userID of a user whose invitations we want to retrieve
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User invitations successfully shown
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: This allows a user to log into the system.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
        '400':
          description: Invalid username/password supplied
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: [ ]
      responses:
        '200':
          description: Successful logout
  /user/{userID}/events:
    get:
      tags:
        - user
      summary: Get events a user is supposed to attend
      description: ''
      operationId: getUserEvents
      parameters:
        - name: userID
          in: path
          description: 'UserID of a user for whom we want to retrieve events they are supposed to attend'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found
  /user/{userID}/events/history:
    get:
      tags:
        - user
      summary: Get user's event history
      description: This allows to retrieve events user has attended in the past.
      operationId: getUserEventHistory
      parameters:
        - name: userID
          in: path
          description: UserID of a user for whom we want to retrieve event history
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found

  /event:
    put:
      tags:
        - event
      summary: Update an existing event
      description: Update an existing event by Id
      operationId: updateEvent
      requestBody:
        description: Update an existent event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
        '405':
          description: Validation exception
      security:
        - api_key: [ ]
    post:
      tags:
        - event
      summary: Add a new event
      description: Add a new event
      operationId: addEvent
      requestBody:
        description: Create a new event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '405':
          description: Invalid input
      security:
        - api_key: [ ]
    get:
      tags:
        - event
      summary: Finds Events
      description: Finds Events
      operationId: findEvent
      parameters:
        - name: start
          in: query
          description: Start date
          required: false
          explode: true
          schema:
            type: string
            format: date
        - name: end
          in: query
          description: End date
          required: false
          explode: true
          schema:
            type: string
            format: date
        - name: cancelled
          in: query
          description: Whether the event is cancelled
          required: false
          explode: true
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid query values
      security:
        - api_key: [ ]
  /event/{eventId}:
    get:
      tags:
        - event
      summary: Find event by ID
      description: Returns a single event
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
      security:
        - api_key: [ ]
    delete:
      tags:
        - event
      summary: Deletes an event
      description: delete an event
      operationId: deleteEvent
      parameters:
        - name: eventId
          in: path
          description: Event id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid event value
      security:
        - api_key: [ ]

  /track:
    post:
      tags:
        - track
      summary: Creates a new track
      description: This allows for new track creation.
      operationId: addTrack
      requestBody:
        description: Created track object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        '200':
          description: Successfully added new track
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
            application/xml:
              schema:
                $ref: '#/components/schemas/Track'
        '401':
          description: UnauthorizedError
        '405':
          description: Invalid input for new track
    put:
      tags:
        - track
      summary: Update track details
      description: This allows users to update track details
      operationId: updateTrack
      parameters:
        - name: trackID
          in: path
          description: id of the track that is being updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent track
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        '204':
          description: Track successfully updated
        '400':
          description: Invalid Track info supplied
        '401':
          description: UnauthorizedError
        '404':
          description: Track object not found
    delete:
      tags:
        - track
      summary: Deletes a track
      description: This allows removing tracks.
      operationId: deleteTrack
      parameters:
        - name: trackID
          in: path
          description: The if of the track that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Track successfully deleted
        '400':
          description: Invalid trackID supplied
        '401':
          description: UnauthorizedError
        '404':
          description: Track not found
  /track/{trackID}:
    get:
      tags:
        - track
      summary: get track by id
      description: returns track with id == trackID
      operationId: getTrack
      parameters:
        - name: trackID
          in: path
          description: id of the track that is being fetching
          required: true
          schema:
            type: integer
      requestBody:
        description: Fetch an existent track
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        '200':
          description: Track successfully fetched
        '400':
          description: Invalid Track id supplied
        '401':
          description: UnauthorizedError
        '404':
          description: Track id not found


components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: Marieke
        lastName:
          type: string
          example: Smith
        email:
          type: string
          example: pete@email.com
        password:
          type: string
          example: '12345'
        affiliation:
          type: string
          example: 'Fireman'
        personalWebsite:
          type: string
          example: "myPersonalWebsite.com"
        preferredCommunication:
          type: string
          example: "e-mail"
      xml:
        name: user
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 4321234
        startDate:
          type: string
          format: date
          example: 2001-07-04 12:08
        endDate:
          type: string
          format: date
          example: 2001-08-05 15:23
        isCancelled:
          type: boolean
        name:
          type: string
          example: Open conference for paper review
        description:
          nullable: true
          type: string
          example: this is a conference that deals with submitting papers to review.
      xml:
        name: event
    Attendee:
      type: object
      properties:
        event_id:
          type: integer
          format: int64
          example: 10
        user_id:
          type: integer
          format: int64
          example: 10
        role:
          $ref: '#/components/schemas/Role'
          example: general_chair
    Track:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: "track Title 1"
        description:
          type: string
          example: "track 1 is ..., aims to ..."
        deadline:
          type: string
          description: the deadline for all paper submissions
          example: "2022/11/24, 21:59"
        paperType:
          type: string
          description: the required paper type for this track
          enum:
            - full-paper
            - short-paper
            - position-paper
        eventId:
          type: integer
          format: int64
          example: 5
        PC_Chairs:
          type: array
          description: list of user who have permission to edit this track
          xml:
            name: PC_Chairs
            wrapped: true
          items:
            $ref: '#/components/schemas/User'
        PC_Members:
          description: list of user who have permission to give reviews
          type: array
          xml:
            name: PC_Members
            wrapped: true
          items:
            $ref: '#/components/schemas/User'
      xml:
        name: track
    Role:
      type: string
      enum:
        - general_chair
        - pc_chair
        - pc_member
        - sub_reviewer
        - author
        - attendee
        - invited
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    api_key:
      type: http
      scheme: bearer
      bearerFormat: JWT
