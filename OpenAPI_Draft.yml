openapi: 3.0.3
info:
  title: User Microservice
  description: |-
    This is the User Microservice for the EasyConf scenario in CSE2115
  version: 0.0.0
tags:
  - name: user
    description: Operations about user
  - name: event
paths:
  /user:
    post:
      tags:
        - user
      summary: Creates a new account
      description: This allows for new account creation.
      operationId: createAccount
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: Operation executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/{userID}:
    put:
      tags:
        - user
      summary: Update user account
      description: This allows to update the account information of a user.
      operationId: updateAccount
      parameters:
        - name: userID
          in: path
          description: userID that need to be deleted
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent userAccount
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '204':
          description: User account successfully updated
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/delete/{userID}:
    delete:
      tags:
        - user
      summary: Deletes an account
      description: This allows for account deletion.
      operationId: deleteAccount
      parameters:
        - name: userID
          in: path
          description: The userID that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User successfully deleted
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found
  /user/{userID}/invitations:
    get:
      tags:
        - user
      summary: Shows user invitations
      description: This allows to show the current invitations for events of the user.
      operationId: getUserInvitations
      parameters:
        - name: userID
          in: path
          description: The userID of a user whose invitations we want to retrieve
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User invitations successfully shown
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: This allows a user to log into the system.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token for authentication
        '400':
          description: Invalid username/password supplied
  /user/logout:
    post:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: [ ]
      responses:
        '200':
          description: Successful logout
  /user/{userID}/events:
    get:
      tags:
        - user
      summary: Get events a user is supposed to attend
      description: ''
      operationId: getUserEvents
      parameters:
        - name: userID
          in: path
          description: 'UserID of a user for whom we want to retrieve events they are supposed to attend'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found
  /user/{userID}/events/history:
    get:
      tags:
        - user
      summary: Get user's event history
      description: This allows to retrieve events user has attended in the past.
      operationId: getUserEventHistory
      parameters:
        - name: userID
          in: path
          description: UserID of a user for whom we want to retrieve event history
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid userID supplied
        '404':
          description: User not found

  /event:
    put:
      tags:
        - event
      summary: Update an existing event
      description: Update an existing event by Id
      operationId: updateEvent
      requestBody:
        description: Update an existent event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
        '405':
          description: Validation exception
      security:
        - api_key: [ ]
    post:
      tags:
        - event
      summary: Add a new event
      description: Add a new event
      operationId: addEvent
      requestBody:
        description: Create a new event
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '405':
          description: Invalid input
      security:
        - api_key: [ ]
    get:
      tags:
        - event
      summary: Finds Events
      description: Finds Events
      operationId: findEvent
      parameters:
        - name: start
          in: query
          description: Start date
          required: false
          explode: true
          schema:
            type: string
            format: date
        - name: end
          in: query
          description: End date
          required: false
          explode: true
          schema:
            type: string
            format: date
        - name: cancelled
          in: query
          description: Whether the event is cancelled
          required: false
          explode: true
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '400':
          description: Invalid query values
      security:
        - api_key: [ ]
  /event/{eventId}:
    get:
      tags:
        - event
      summary: Find event by ID
      description: Returns a single event
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of event to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          description: Invalid ID supplied
        '404':
          description: Event not found
      security:
        - api_key: [ ]
    delete:
      tags:
        - event
      summary: Deletes an event
      description: delete an event
      operationId: deleteEvent
      parameters:
        - name: eventId
          in: path
          description: Event id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid event value
      security:
        - api_key: [ ]

  /track:
    post:
      tags:
        - track
      summary: Creates a new track
      description: This allows for new track creation.
      operationId: addTrack
      requestBody:
        description: Created track object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
          application/xml:
            schema:
              $ref: '#/components/schemas/Track'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        '200':
          description: Successfully added new track
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
            application/xml:
              schema:
                $ref: '#/components/schemas/Track'
        '405':
          description: Invalid input for new track
  /track/{trackID}:
    put:
      tags:
        - track
      summary: Update track details
      description: This allows users to update track details
      operationId: updateTrack
      parameters:
        - name: trackID
          in: path
          description: id of the track that is being updated
          required: true
          schema:
            type: integer
      requestBody:
        description: Update an existent track
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
          application/xml:
            schema:
              $ref: '#/components/schemas/Track'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        '204':
          description: Track successfully updated
        '400':
          description: Invalid Track info supplied
        '404':
          description: Track object not found
    delete:
      tags:
        - track
      summary: Deletes a track
      description: This allows removing tracks.
      operationId: deleteTrack
      parameters:
        - name: trackID
          in: path
          description: The if of the track that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Track successfully deleted
        '400':
          description: Invalid trackID supplied
        '404':
          description: Track not found
  /track/findAllTrackForMember/{userId}:
    get:
      tags:
        - track
      summary: Finds all track for PC member
      description: Finds all track which the user is assigned as a PC member
      operationId: findAllTrackForMember
      parameters:
        - name: userId
          in: path
          description: id of the PC member
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation for getting all tracks for a PC member
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '400':
          description: Invalid useID value
  /track/findAllTrackForChair/{userId}:
    get:
      tags:
        - track
      summary: Finds all track for PC chair
      description: Finds all track which the user is assigned as a PC chair
      operationId: findAllTrackForChair
      parameters:
        - name: userId
          in: path
          description: id of the PC chair
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation for getting all tracks for a PC chair
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
        '400':
          description: Invalid userID value

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: Marieke
        lastName:
          type: string
          example: Smith
        email:
          type: string
          example: pete@email.com
        password:
          type: string
          example: '12345'
        affiliation:
          type: string
          example: 'Fireman'
        personalWebsite:
          type: string
          example: "myPersonalWebsite.com"
        preferredCommunication:
          type: string
          example: "e-mail"
      xml:
        name: user
    Event:
      type: object
      xml:
        name: event
    Attendee:
      type: object
      properties:
        event_id:
          type: integer
          format: int64
          example: 10
        user_id:
          type: integer
          format: int64
          example: 10
        role:
          $ref: '#/components/schemas/Role'
          example: general_chair
    Track:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: "track Title 1"
        description:
          type: string
          example: "track 1 is ..., aims to ..."
        deadline:
          type: string
          description: the deadline for all paper submissions
          example: "2022/11/24, 21:59"
        paperType:
          type: string
          description: the required paper type for this track
          enum:
            - full-paper
            - short-paper
            - position-paper
        eventId:
          type: integer
          format: int64
          example: 5
        PC_Chairs:
          type: array
          description: list of user who have permission to edit this track
          xml:
            name: PC_Chairs
            wrapped: true
          items:
            $ref: '#/components/schemas/User'
        PC_Members:
          description: list of user who have permission to give reviews
          type: array
          xml:
            name: PC_Members
            wrapped: true
          items:
            $ref: '#/components/schemas/User'
      xml:
        name: track
    Role:
      type: string
      enum:
        - general_chair
        - pc_chair
        - pc_member
        - sub_reviewer
        - author
        - attendee
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    api_key:
      type: apiKey
      name: api_key
      in: header
